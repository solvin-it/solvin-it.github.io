---
import ProjectLayout from '../../layouts/ProjectLayout.astro';
---

<ProjectLayout
  title="Customer Churn Predictor API"
  description="End-to-end ML deployment: model, FastAPI microservice, and Dockerized delivery for churn prediction."
  technologies={['Python', 'scikit-learn', 'FastAPI', 'Docker', 'GCP']}
  outcome="Delivered a production-ready churn prediction API and proved an end-to-end ML workflow from data to deployment"
  timeline="2 days (prototype → deployment)"
  role="AI/ML Engineer"
  repoUrl="https://github.com/solvin-it/customer-churn-api"
  liveUrl="https://churn.solvin.co/"
>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Project Overview</h2>

  <div class="space-y-6">
    <p class="text-lg leading-relaxed text-gray-700 dark:text-gray-300">
      The <strong>Customer Churn Predictor API</strong> is an end-to-end machine learning deployment that predicts customer churn using the Telco Customer Churn dataset. I built and deployed a production-ready model wrapped in a FastAPI microservice and containerized with Docker for portability.
    </p>

    <div class="bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800 rounded-lg p-6">
      <p class="text-primary-800 dark:text-primary-200 font-medium">
        <strong>Value:</strong> Predict at-risk customers so businesses can prioritize retention actions and measure impact.
      </p>
    </div>
  </div>
</section>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Problem & Opportunity</h2>

  <p class="text-lg leading-relaxed text-gray-700 dark:text-gray-300 mb-4">Customer churn is a high-cost problem for subscription-driven businesses. Predicting churn enables targeted retention campaigns and directly improves revenue retention.</p>

  <p class="text-lg leading-relaxed text-gray-700 dark:text-gray-300 italic">This project demonstrates how an ML model can be integrated into standard engineering workflows and delivered as an API that product teams can use.</p>
</section>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Dataset & Preparation</h2>

  <div class="prose prose-lg max-w-none text-gray-700 dark:text-gray-300">
    <ul>
      <li><strong>Dataset:</strong> Telco Customer Churn (Kaggle).</li>
      <li><strong>Preprocessing:</strong> Cleaned missing values, encoded categorical variables, and scaled numeric features.</li>
      <li><strong>Feature focus:</strong> demographics, tenure, contract type, and service subscriptions—features aligned with real churn drivers.</li>
    </ul>
  </div>
</section>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Modeling Approach</h2>

  <div class="grid md:grid-cols-2 gap-8">
    <div>
      <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">Baseline & Strategy</h3>
      <p class="text-gray-700 dark:text-gray-300 mb-4">I started with Logistic Regression for interpretability, then experimented with tree-based methods. Class imbalance was handled by adjusting class weights and monitoring recall-first metrics to prioritize catching churners.</p>

      <h4 class="font-semibold text-gray-800 dark:text-gray-200 mt-4 mb-2">Evaluation</h4>
      <ul class="list-disc ml-6 text-gray-700 dark:text-gray-300">
        <li>Primary metric: <strong>Recall</strong> (catch churners)</li>
        <li>Secondary: Precision, AUC</li>
        <li>Result: Strong predictive accuracy; top features included contract type, tenure, and monthly charges</li>
      </ul>
    </div>

    <div>
      <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-3">Model Management</h3>
      <p class="text-gray-700 dark:text-gray-300 mb-3">Models and preprocessing pipelines were serialized with joblib. Experiments were tracked locally (notebooks) and artifacts saved to a `/models` folder for reproducible deployment.</p>

      <div class="bg-gray-50 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg p-4">
        <p class="text-sm text-gray-600 dark:text-gray-400">Repository structure: <code class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-sm">/notebooks</code>, <code class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-sm">/app</code>, <code class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-sm">/models</code></p>
      </div>
    </div>
  </div>
</section>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Technical Architecture & Implementation</h2>

  <div class="space-y-6 text-gray-700 dark:text-gray-300">
    <p>Key pieces:</p>
    <ul class="list-disc ml-6">
      <li><strong>API:</strong> <code class="px-2 py-1 bg-gray-100 dark:bg-gray-700 rounded text-sm">POST /predict</code> accepts JSON features and returns churn probability.</li>
      <li><strong>FastAPI:</strong> Lightweight microservice exposing inference endpoints and simple docs.</li>
      <li><strong>Docker:</strong> Containerized for consistent deployment across environments.</li>
      <li><strong>Deployment:</strong> Deployed on GCP for accessibility during demos.</li>
    </ul>

    <div class="bg-primary-50 dark:bg-primary-900/20 border border-primary-200 dark:border-primary-800 rounded-lg p-4">
      <p class="text-primary-800 dark:text-primary-200"><strong>Design goal:</strong> Make the model usable by product teams through a well-documented, low-latency API.</p>
    </div>
  </div>
</section>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Challenges & Trade-offs</h2>

  <div class="grid md:grid-cols-2 gap-6">
    <div class="bg-yellow-50 dark:bg-yellow-900/20 border border-yellow-200 dark:border-yellow-800 rounded-lg p-6">
      <h3 class="font-semibold text-yellow-800 dark:text-yellow-200 mb-2">Pipeline Iteration</h3>
      <p class="text-yellow-700 dark:text-yellow-300">Iterating preprocessing without breaking inference required careful serialization of the pipeline and versioned artifacts.</p>
    </div>

    <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
      <h3 class="font-semibold text-red-800 dark:text-red-200 mb-2">Model Selection</h3>
      <p class="text-red-700 dark:text-red-300">Balanced interpretability vs performance; logistic regression was interpretable but tree-based models improved raw performance.</p>
    </div>

    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
      <h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-2">Deployment Portability</h3>
      <p class="text-blue-700 dark:text-blue-300">Ensuring the API behaved consistently across environments required Docker and careful dependency pinning.</p>
    </div>

    <div class="bg-purple-50 dark:bg-purple-900/20 border border-purple-200 dark:border-purple-800 rounded-lg p-6">
      <h3 class="font-semibold text-purple-800 dark:text-purple-200 mb-2">Monitoring</h3>
      <p class="text-purple-700 dark:text-purple-300">Production monitoring and model drift detection were out-of-scope but identified as necessary next steps.</p>
    </div>
  </div>
</section>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Outcomes & Learnings</h2>

  <div class="grid md:grid-cols-2 gap-8">
    <div class="bg-green-50 dark:bg-green-900/20 border border-green-200 dark:border-green-800 rounded-lg p-6">
      <h3 class="font-semibold text-green-800 dark:text-green-200 mb-3">What I Delivered</h3>
      <p class="text-green-700 dark:text-green-300">A working end-to-end ML pipeline, a serialized model, and a FastAPI service ready for integration.</p>
    </div>

    <div class="bg-blue-50 dark:bg-blue-900/20 border border-blue-200 dark:border-blue-800 rounded-lg p-6">
      <h3 class="font-semibold text-blue-800 dark:text-blue-200 mb-3">Skills Gained</h3>
      <ul class="ml-6 list-disc text-gray-700 dark:text-gray-300">
        <li>Model evaluation and metric-driven development</li>
        <li>API design and integration</li>
        <li>Containerization and deployment practices</li>
      </ul>
    </div>
  </div>

  <div class="mt-6 bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 border border-gray-200 dark:border-gray-700 rounded-lg p-6">
    <p class="text-gray-700 dark:text-gray-300">Proudest achievement: Demonstrating the ability to not only train models but to ship them as production-ready services.</p>
  </div>
</section>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Future Directions</h2>

  <ul class="list-disc ml-6 text-gray-700 dark:text-gray-300 space-y-2">
    <li>Experiment with XGBoost or Random Forests to improve performance.</li>
    <li>Add MLOps practices: CI/CD pipelines, monitoring, and model versioning.</li>
    <li>Extend the service with a dashboard that visualizes churn risk and business impact.</li>
  </ul>
</section>

<section class="mb-16">
  <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-6 border-b border-gray-200 dark:border-gray-700 pb-3">Reflection</h2>

  <div class="bg-gradient-to-br from-gray-50 to-gray-100 dark:from-gray-800 dark:to-gray-900 border border-gray-200 dark:border-gray-700 rounded-2xl p-8">
    <p class="text-lg leading-relaxed text-gray-700 dark:text-gray-300 mb-4">This project was my first true AI/ML engineering experience — connecting data science workflows with software engineering practices. The exercise gave me confidence in making ML usable through APIs and shipping reproducible artifacts.</p>
    
    <p class="italic text-gray-600 dark:text-gray-400">Advice: don't stop at training a model—wrap it in an API, deploy it, and make it usable. That's when ML becomes real.</p>
  </div>
</section>

</ProjectLayout>