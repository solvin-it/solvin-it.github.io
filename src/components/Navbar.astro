---
import { siteConfig } from '../content/site.ts';
import ThemeToggle from './ThemeToggle.tsx';
---

<nav class="sticky top-0 z-50 bg-white/80 dark:bg-gray-900/80 backdrop-blur-md border-b border-gray-200 dark:border-gray-700">
  <div class="container">
    <div class="flex items-center justify-between h-16">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <a 
          href="/" 
          class="text-xl font-bold text-gray-900 dark:text-white hover:text-primary-600 dark:hover:text-primary-400 transition-colors"
          aria-label="Home"
        >
          {siteConfig.name}
        </a>
      </div>

      <!-- Desktop Navigation -->
      <div class="hidden md:block">
        <div class="flex items-center space-x-8">
          {siteConfig.navigation.map((item) => (
            <a
              href={item.href}
              class="text-gray-700 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white font-medium transition-colors"
            >
              {item.label}
            </a>
          ))}
        </div>
      </div>

      <!-- Theme Toggle & Mobile Menu Button -->
      <div class="flex items-center space-x-4">
        <ThemeToggle client:load />
        
        <!-- Mobile menu button -->
        <button
          type="button"
          class="md:hidden p-2 text-gray-500 dark:text-gray-400 hover:text-gray-900 dark:hover:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
          aria-label="Open navigation menu"
          aria-expanded="false"
          data-mobile-menu-button
        >
          <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Navigation Menu -->
  <div 
    class="md:hidden fixed inset-0 top-16 bg-white dark:bg-gray-900 z-40 transform translate-x-full transition-transform duration-300 ease-in-out"
    data-mobile-menu
  >
    <div class="px-4 py-6 space-y-4">
      {siteConfig.navigation.map((item) => (
        <a
          href={item.href}
          class="block px-4 py-3 text-lg font-medium text-gray-900 dark:text-white hover:bg-gray-100 dark:hover:bg-gray-800 rounded-lg transition-colors"
          data-mobile-menu-link
        >
          {item.label}
        </a>
      ))}
    </div>
  </div>

  <!-- Mobile Menu Overlay -->
  <div 
    class="md:hidden fixed inset-0 bg-black/50 opacity-0 pointer-events-none transition-opacity duration-300 ease-in-out z-30"
    data-mobile-overlay
  ></div>
</nav>

<script>
  function initMobileMenu() {
    const button = document.querySelector('[data-mobile-menu-button]') as HTMLButtonElement;
    const menu = document.querySelector('[data-mobile-menu]') as HTMLElement;
    const overlay = document.querySelector('[data-mobile-overlay]') as HTMLElement;
    const menuLinks = document.querySelectorAll('[data-mobile-menu-link]');

    if (!button || !menu || !overlay) return;

    let isOpen = false;

    function toggleMenu() {
      isOpen = !isOpen;
      button.setAttribute('aria-expanded', isOpen.toString());
      
      if (isOpen) {
        menu.classList.remove('translate-x-full');
        overlay.classList.remove('opacity-0', 'pointer-events-none');
        document.body.classList.add('overflow-hidden');
      } else {
        menu.classList.add('translate-x-full');
        overlay.classList.add('opacity-0', 'pointer-events-none');
        document.body.classList.remove('overflow-hidden');
      }
    }

    function closeMenu() {
      if (isOpen) {
        toggleMenu();
      }
    }

    button.addEventListener('click', toggleMenu);
    overlay.addEventListener('click', closeMenu);
    
    // Close menu when clicking on links
    menuLinks.forEach(link => {
      link.addEventListener('click', closeMenu);
    });

    // Close menu on escape key
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape' && isOpen) {
        closeMenu();
      }
    });
  }

  // Initialize on page load and after navigation
  document.addEventListener('DOMContentLoaded', initMobileMenu);
  document.addEventListener('astro:after-swap', initMobileMenu);
</script>